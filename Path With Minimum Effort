class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        
        n = len(heights)
        m = len(heights[0])
        min_heap = [(0,0,0)]
        dist = [[float('inf')] * m for _ in range(n)]
        dist[0][0] = 0
        while min_heap :
            effort,i,j = heapq.heappop(min_heap)
            if i == n-1 and j == m-1:
                return effort
            for dr,dc in [(-1,0),(1,0),(0,1),(0,-1)]:
                nr,nc = dr+i,dc+j
                if 0<=nr<n and 0<=nc<m:
                    new_effort = max(effort,abs(heights[i][j]-heights[nr][nc]))
                    if new_effort < dist[nr][nc]:
                        dist[nr][nc] = new_effort
                        heapq.heappush(min_heap,(new_effort,nr,nc))
                    
        return -1




